{
    "Time" : {
        "description": "Inserts time",
        "prefix": [
            "Current time",
            "Currtime",
            "Now",
        ],
        "body": [
            "'$CURRENT_YEAR $CURRENT_MONTH $CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND'",
        ]
    },
    "Returns Menu.IsOpened()" : {
        "description": "Returns Menu.IsOpened()",
        "prefix": "Menu.IsOpened()",
        "body": "Menu.IsOpened()",
    },
    "Creates a colorpicker : Color" : {
        "description": "Creates a button which returns it state",
        "prefix": "Menu.AddColorPicker()",
        "body": "Menu.AddColorPicker()",
    },
    "Creates a button which returns it state : BOOL" : {
        "description": "Creates a button which returns it state",
        "prefix": "Menu.AddButton()",
        "body": "Menu.AddButton('${1:Label}', ${2:Function})",
    },
    "Adds a checkbox interface to menu : BOOL " : {
        "description": "Adds a checkbox interface to menu",
        "prefix": [
            "Menu.AddCheckbox()",
        ],
        "body": "Menu.AddCheckbox('${1:Label}', '${2:Variablename}', false)"
    },
    "creates a slider in the ui : INT" : {
        "description": "Returns an int and creates a slider in the ui",
        "prefix": ["Menu.Sliderint()"],
        "body": "Menu.AddSliderInt('${1:Label}','${2:Variablename}',${3:MinVal}, ${4:MaxVal})"
    },
    "creates a slider in the ui : FLOAT" : {
        "description": "Returns an float and creates a slider in the ui",
        "prefix": ["Menu.Sliderfloat()"],
        "body": "Menu.AddSliderInt('${1:Label}','${2:Variablename}',${3:MinVal}, ${4:MaxVal})"
    },
    "Creates bind prompt returns : BOOL" : {
        "description": "Creates bind prompt",
        "prefix": ["Menu.AddKeybind()"],
        "body" : "Menu.AddKeybind('${1:Label}', '${2:Variablename}', 0, 1)"
    },
    "Creates Combo : INT" : {
        "description": "Creates combobox",
        "prefix": ["Menu.Combo()"],
        "body": "Menu.AddCombo('${1:Label}', '${2:Variablename}', {'${3:Element}'}, 0)"
    },
    "Creates MultiCombo : BOOL" : {
        "description": "Creates multicombo box",
        "prefix": ["Menu.MutliCombo()"],
        "body": "Menu.AddMultiCombo('${1:Label}', '${2:Variablename}', {'${3:Element}'}, {${4:DefualtPos})"
    },
    "Creates Color picker : COLOR(r, g, b, opacity)" :{
        "description": "Creates Color picker",
        "prefix": ["Menu.AddColorPicker()"],
        "body": "Menu.AddColorPicker('${1:Label}', '${2:Variablename}', Color(255, 255, 255, 255))"
    },
    "If a button is clicked / pressed this function is called" : {
        "description": "If a button is clicked / pressed",
        "prefix": ["OnButtonPress()"],
        "body": ["function OnButtonPress()","${1}","end"]
    },
    "This function is called when the script is unloaded" : {
        "description": "This function is called when the script is unloaded",
        "prefix": "OnUnload()",
        "body": ["function OnUnload()","${1}","end"]
    },
    "This function is called when the script gets drawn" : {
        "description": "This function is called when the script gets drawn",
        "prefix": "OnDraw()",
        "body": ["function OnUnload()","${1}","end"]
    },
    "This function is called before prediction" : {
        "description": "This function is called before prediction",
        "prefix": "OnPrePrediction()",
        "body": ["function OnPrePrediction()","${1}","end"]
    },
    "This function is called on prediction" : {
        "description": "This function is called on prediction",
        "prefix": "OnPrediction()",
        "body": ["function OnPrediction()","${1}","end"]
    },
    "OnCreatemove" : {
        "description": "",
        "prefix": "OnCreatemove()",
        "body": ["function OnCreatemove()","${1}","end"]
    },
    "OnFrameStageNotify" : {
        "description": "OnFrameStageNotify",
        "prefix": "OnFrameStageNotify()",
        "body": ["function OnFrameStageNotify()","${1}","end"]
    },
    //callbacks
    "Makes a callback" : {
        "description": "Makes a callback",
        "prefix": "Callbacks.Add()",
        "body": "Callbacks.Add('${1:Name}',${2:FunctionName})",
    },
    "List callbacks" : {
        "description": "List callbacks",
        "prefix": "eListCallbacks",
        "body": [
            "--[[",
            "Unload",
            "Draw",
            "Event",
            "Pre-Prediction   (return usercmd in the function argument)",
            "Prediction       (return usercmd in the function argument)",
            "Createmove       (return usercmd in the function argument)",
            "FrameStageNotify (returns current stage in the function argument)",
            "]]--",
        ]
    },
    "List GameEvent callbacks" : {
        "description": "List GameEvent callbacks",
        "prefix": "eListGameEventCallbacks",
        "body": [
            "--[[",
            "player_hurt",
            "player_death",
            "bullet_impact",
            "weapon_fire",
            "round_start",
            "item_purchase",
            "player_death",
            "other_death",
            "player_hurt",
            "item_purchase",
            "bomb_beginplant",
            "bomb_abortplant",
            "bomb_planted",
            "bomb_defused",
            "bomb_exploded",
            "bomb_dropped",
            "bomb_pickup",
            "defuser_dropped",
            "defuser_pickup",
            "announce_phase_end",
            "cs_intermission",
            "bomb_begindefuse",
            "bomb_abortdefuse",
            "hostage_follows",
            "hostage_hurt",
            "hostage_killed",
            "hostage_rescued",
            "hostage_stops_following",
            "hostage_rescued_all",
            "hostage_call_for_help",
            "vip_escaped",
            "vip_killed",
            "player_radio",
            "bomb_beep",
            "weapon_fire",
            "weapon_fire_on_empty",
            "grenade_thrown",
            "weapon_outofammo",
            "weapon_reload",
            "weapon_zoom",
            "silencer_detach",
            "inspect_weapon",
            "weapon_zoom_rifle",
            "player_spawned",
            "item_pickup",
            "item_pickup_failed",
            "item_remove",
            "ammo_pickup",
            "item_equip",
            "enter_buyzone",
            "exit_buyzone",
            "buytime_ended",
            "enter_bombzone",
            "exit_bombzone",
            "enter_rescue_zone",
            "exit_rescue_zone",
            "silencer_off",
            "silencer_on",
            "buymenu_open",
            "buymenu_close",
            "round_announce_warmup",
            "round_announce_match_start",
            "round_prestart",
            "round_poststart",
            "round_start",
            "round_end",
            "grenade_bounce",
            "hegrenade_detonate",
            "flashbang_detonate",
            "smokegrenade_detonate",
            "smokegrenade_expired",
            "molotov_detonate",
            "decoy_detonate",
            "decoy_started",
            "tagrenade_detonate",
            "inferno_startburn",
            "inferno_expire",
            "inferno_extinguish",
            "decoy_firing",
            "bullet_impact",
            "player_footstep",
            "player_jump",
            "player_blind",
            "player_falldamage",
            "door_moving",
            "round_freeze_end",
            "mb_input_lock_success",
            "mb_input_lock_cancel",
            "nav_blocked",
            "nav_generate",
            "player_stats_updated",
            "achievement_info_loaded",
            "spec_target_updated",
            "spec_mode_updated",
            "hltv_changed_mode",
            "cs_game_disconnected",
            "cs_win_panel_round",
            "cs_win_panel_match",
            "cs_match_end_restart",
            "cs_pre_restart",
            "show_freezepanel",
            "hide_freezepanel",
            "freezecam_started",
            "player_avenged_teammate",
            "achievement_earned",
            "achievement_earned_local",
            "item_found",
            "items_gifted",
            "repost_xbox_achievements",
            "match_end_conditions",
            "round_mvp",
            "player_decal",
            "teamplay_round_start",
            "client_disconnect",
            "gg_player_levelup",
            "ggtr_player_levelup",
            "assassination_target_killed",
            "ggprogressive_player_levelup",
            "gg_killed_enemy",
            "gg_final_weapon_achieved",
            "gg_bonus_grenade_achieved",
            "switch_team",
            "gg_leader",
            "gg_team_leader",
            "gg_player_impending_upgrade",
            "write_profile_data",
            "trial_time_expired",
            "update_matchmaking_stats",
            "player_reset_vote",
            "enable_restart_voting",
            "sfuievent",
            "start_vote",
            "player_given_c4",
            "player_become_ghost",
            "gg_reset_round_start_sounds",
            "tr_player_flashbanged",
            "tr_highlight_ammo",
            "tr_mark_complete",
            "tr_mark_best_time",
            "tr_exit_hint_trigger",
            "bot_takeover",
            "tr_show_finish_msgbox",
            "tr_show_exit_msgbox",
            "reset_player_controls",
            "jointeam_failed",
            "teamchange_pending",
            "material_default_complete",
            "cs_prev_next_spectator",
            "cs_handle_ime_event",
            "nextlevel_changed",
            "seasoncoin_levelup",
            "tournament_reward",
            "start_halftime",
            "ammo_refill",
            "parachute_pickup",
            "parachute_deploy",
            "dronegun_attack",
            "drone_dispatched",
            "loot_crate_visible",
            "loot_crate_opened",
            "open_crate_instr",
            "smoke_beacon_paradrop",
            "drone_cargo_detached",
            "choppers_incoming_warning",
            "firstbombs_incoming_warning",
            "dz_item_interaction",
            "snowball_hit_player_face",
            "player_say",
            "]]--",
        ]
    },
    //config
    "Returns config Getbool" : {
        "description": "Returns Getbool",
        "prefix": "Vars.GetBool('ConfigName')",
        "body": "Vars.GetBool('${1:ConfigName}')"
    },
    "Returns config GetFloat" : {
        "description": "Returns GetFloat",
        "prefix": "Vars.GetFloat('ConfigName')",
        "body": "Vars.GetFloat('${1:ConfigName}')"
    },
    "Returns config GetInt" : {
        "description": "Returns GetInt",
        "prefix": "Vars.GetInt('ConfigName')",
        "body": "Vars.GetInt('${1:ConfigName}')"
    },
    "Returns config GetString" : {
        "description": "Returns GetString",
        "prefix": "Vars.GetString('ConfigName')",
        "body": "Vars.GetString('${1:ConfigName}')"
    },
    "Returns config Setbool" : {
        "description": "Returns Setbool",
        "prefix": "Vars.SetBool('ConfigName')",
        "body": "Vars.SetBool('${1:ConfigName}')"
    },
    "Returns config SetFloat" : {
        "description": "Returns SetFloat",
        "prefix": "Vars.SetFloat('ConfigName')",
        "body": "Vars.SetFloat('${1:ConfigName}')"
    },
    "Returns config SetInt" : {
        "description": "Returns SetInt",
        "prefix": "Vars.SetInt('ConfigName')",
        "body": "Vars.SetInt('${1:ConfigName}')"
    },
    "Returns config SetString" : {
        "description": "Returns GetString",
        "prefix": "Vars.SetString('ConfigName')",
        "body": "Vars.SetString('${1:ConfigName}')"
    },
    "Returns config bind is active" : {
        "description": "Returns IsActive",
        "prefix": "Vars.IsActive('ConfigName')",
        "body": "Vars.IsActive('${1:ConfigName}')"
    },












    "Returns Command number" : {
        "description": "Returns Command number",
        "prefix": "CUserCmd:iCommandNumber",
        "body": "CUserCmd:iCommandNumber",
    },
    "Returns tickcount" : {
        "description": "Returns tickcount",
        "prefix": "CUserCmd:iTickCount",
        "body": "CUserCmd:iTickCount",
    },
    "Returns angViewPoint" : {
        "description": "Returns angViewPoint",
        "prefix": "CUserCmd:angViewPoint",
        "body": "CUserCmd:angViewPoint",
    },
    "Returns vecAimDirection" : {
        "description": "Returns vecAimDirection",
        "prefix": "CUserCmd:vecAimDirection",
        "body": "CUserCmd:vecAimDirection",
    },
    
    "Returns flForwardMove" : {
        "description": "Returns flForwardMove",
        "prefix": "CUserCmd:flForwardMove",
        "body": "CUserCmd:flForwardMove",
    },
    
    "Returns flSideMove" : {
        "description": "Returns flSideMove",
        "prefix": "CUserCmd:flSideMove",
        "body": "CUserCmd:flSideMove",
    },
    
    "Returns flUpMove" : {
        "description": "Returns flUpMove",
        "prefix": "CUserCmd:flUpMove",
        "body": "CUserCmd:flUpMove",
    },
    
    "Returns iButtons" : {
        "description": "Returns Command number int",
        "prefix": "CUserCmd:iButtons",
        "body": "CUserCmd:iButtons",
    },
    
    "Returns uImpulse" : {
        "description": "Returns uImpulse",
        "prefix": "CUserCmd:uImpulse",
        "body": "CUserCmd:uImpulse",
    },
    
    "Returns iWeaponSelect" : {
        "description": "Returns iWeaponSelect",
        "prefix": "CUserCmd:iWeaponSelect",
        "body": "CUserCmd:iWeaponSelect",
    },
    
    "Returns iWeaponSubType" : {
        "description": "Returns iWeaponSubType",
        "prefix": "CUserCmd:iWeaponSubType",
        "body": "CUserCmd:iWeaponSubType",
    },
    
    "Returns iRandomSeed" : {
        "description": "Returns iRandomSeed",
        "prefix": "CUserCmd:iRandomSeed",
        "body": "CUserCmd:iRandomSeed",
    },
    
    "Returns sMouseDeltaX" : {
        "description": "Returns sMouseDeltaX",
        "prefix": "CUserCmd:sMouseDeltaX",
        "body": "CUserCmd:sMouseDeltaX",
    },
    
    "Returns sMouseDeltaY" : {
        "description": "Returns sMouseDeltaY",
        "prefix": "CUserCmd:sMouseDeltaY",
        "body": "CUserCmd:sMouseDeltaY",
    },
    
    "Returns bHasBeenPredicted" : {
        "description": "Returns bHasBeenPredicted",
        "prefix": "CUserCmd:bHasBeenPredicted",
        "body": "CUserCmd:bHasBeenPredicted",
    },
    
    "Returns vecHeadAngles" : {
        "description": "Returns vecHeadAngles",
        "prefix": "CUserCmd:vecHeadAngles",
        "body": "CUserCmd:vecHeadAngles",
    },

    "Returns realtime" : {
        "description": "Returns realtime",
        "prefix": "GlobalVars.GetRealtime()",
        "body": "GlobalVars.GetRealtime()",
    },
    //global vars
    "Returns Frame Count" : {
        "description": "Returns Frame Count",
        "prefix": "GlobalVars.GetFrameCount()",
        "body": "GlobalVars.GetFrameCount()",
    },
    "Returns AbsFrametime" : {
        "description": "Returns AbsFrametime",
        "prefix": "GlobalVars.GetAbsFrametime()",
        "body": "GlobalVars.GetAbsFrametime()",
    },
    "Returns GetCurtime" : {
        "description": "Returns GetCurtime",
        "prefix": "GlobalVars.GetCurtime()",
        "body": "GlobalVars.GetCurtime()",
    },
    "Returns GetFrametime" : {
        "description": "Returns GetFrametime",
        "prefix": "GlobalVars.GetFrametime()",
        "body": "GlobalVars.GetFrametime()",
    },
    "Returns GetTickcount" : {
        "description": "Returns GetTickcount",
        "prefix": "GlobalVars.GetTickcount()",
        "body": "GlobalVars.GetTickcount()",
    },
    "Returns GetIntervalPerTick" : {
        "description": "Returns GetIntervalPerTick",
        "prefix": "GlobalVars.GetIntervalPerTick()",
        "body": "GlobalVars.GetIntervalPerTick()",
    },
    "Returns GetInterpolationAmount" : {
        "description": "Returns GetInterpolationAmount",
        "prefix": "GlobalVars.GetInterpolationAmount()",
        "body": "GlobalVars.GetInterpolationAmount()",
    },
    //clientstate
    "Returns GetLastOutgoingCommand" : {
        "description": "Returns GetLastOutgoingCommand",
        "prefix": "ClientState.GetLastOutgoingCommand()",
        "body": "ClientState.GetLastOutgoingCommand()",
    },
    "Returns GetChokedCommands" : {
        "description": "Returns GetChokedCommands",
        "prefix": "ClientState.GetChokedCommands()",
        "body": "ClientState.GetChokedCommands()",
    },
    "Returns GetLastCommandAck" : {
        "description": "Returns GetLastCommandAck",
        "prefix": "ClientState.GetLastCommandAck()",
        "body": "ClientState.GetLastCommandAck()",
    },
    "Returns GetCommandAck" : {
        "description": "Returns GetCommandAck",
        "prefix": "ClientState.GetCommandAck()",
        "body": "ClientState.GetCommandAck()",
    },
    //engine
    "Returns GetScreenSize" : {
        "description": "Returns GetScreenSize",
        "prefix": "Engine.GetScreenSize()",
        "body": "Engine.GetScreenSize()",
    },
    "Returns GetViewAngles" : {
        "description": "Returns GetViewAngles",
        "prefix": "Engine.GetViewAngles()",
        "body": "Engine.GetViewAngles()",
    },
    "Returns SetViewAngles" : {
        "description": "Returns SetViewAngles",
        "prefix": "Engine.SetViewAngles()",
        "body": "Engine.SetViewAngles(${1:Vec3})",
    },
    "Returns ExecuteClientCmd" : {
        "description": "Returns ExecuteClientCmd",
        "prefix": "Engine.ExecuteClientCmd()",
        "body": "Engine.ExecuteClientCmd(${1:Command})",
    },

    "Returns GetNetChannelInfo" : {
        "description": "Returns GetNetChannelInfo",
        "prefix": "Engine.GetNetChannelInfo()",
        "body": "Engine.GetNetChannelInfo()",
    },

    "Returns GetPlayerInfo" : {
        "description": "Returns GetPlayerInfo",
        "prefix": "Engine.GetPlayerInfo()",
        "body": "Engine.GetPlayerInfo(${1:entityIndex})",
    },

    "Returns GetLocalPlayer" : {
        "description": "Returns GetLocalPlayer",
        "prefix": "Engine.GetLocalPlayer()",
        "body": "Engine.GetLocalPlayer()",
    },

    "Returns GetPlayerForUserID" : {
        "description": "Returns GetPlayerForUserID",
        "prefix": "Engine.GetPlayerForUserID()",
        "body": "Engine.GetPlayerForUserID(${1:userID})",
    },

    "Returns IsInGame" : {
        "description": "Returns IsInGame",
        "prefix": "Engine.IsInGame()",
        "body": "Engine.IsInGame()",
    },

    "Returns IsConnected" : {
        "description": "Returns IsConnected",
        "prefix": "Engine.IsConnected()",
        "body": "Engine.IsConnected()",
    },

    "Returns IsVoiceRecording" : {
        "description": "Returns IsVoiceRecording",
        "prefix": "Engine.IsVoiceRecording()",
        "body": "Engine.IsVoiceRecording()",
    },

    //Inetchannelinfo
    "Returns INetChannelInfo:GetAddress" : {
        "description": "Returns GetAddress",
        "prefix": "INetChannelInfo:GetAddress()",
        "body": "INetChannelInfo:GetAddress()",
    },
    "Returns IsLoopback" : {
        "description": "Returns IsLoopback",
        "prefix": "INetChannelInfo:IsLoopback",
        "body": "INetChannelInfo:IsLoopback",
    },
    "Returns IsTimingOut" : {
        "description": "Returns IsTimingOut",
        "prefix": "INetChannelInfo:IsTimingOut",
        "body": "INetChannelInfo:IsTimingOut",
    },
    "Returns IsPlayback" : {
        "description": "Returns IsPlayback",
        "prefix": "INetChannelInfo:IsPlayback()",
        "body": "INetChannelInfo:IsPlayback()",
    },
    "Returns GetLatency" : {
        "description": "Returns GetLatency",
        "prefix": "INetChannelInfo:GetLatency()",
        "body": "INetChannelInfo:GetLatency(${1:flow})",
    },
    "Returns GetAvgLatency" : {
        "description": "Returns GetAvgLatency",
        "prefix": "INetChannelInfo:GetAvgLatency()",
        "body": "INetChannelInfo:GetAvgLatency(${1:flow})",
    },
    "Returns GetAvgLoss" : {
        "description": "Returns GetAvgLoss",
        "prefix": "INetChannelInfo:GetAvgLoss()",
        "body": "INetChannelInfo:GetAvgLoss(${1:flow})",
    },
    "Returns GetAvgChoke" : {
        "description": "Returns GetAvgChoke",
        "prefix": "INetChannelInfo:GetAvgChoke()",
        "body": "INetChannelInfo:GetAvgChoke(${1:flow})",
    },
    "Shows flow types" : {
        "description": "Shows flow types",
        "prefix": "eFlowtypes",
        "body": [
            "--[[",
            "FLOW_OUTGOING 0",
            "FLOW_INCOMING 1",
            "MAX_FLOWS 2",
            "]]--"
        ]
    },
    //playerinfo
    "Returns steamId64" : {
        "description": "Returns steamId64",
        "prefix": "PlayerInfo.steamId64",
        "body": "PlayerInfo.steamId64",
    },
    "Returns name" : {
        "description": "Returns name",
        "prefix": "PlayerInfo.name",
        "body": "PlayerInfo.name",
    },
    "Returns userid" : {
        "description": "Returns userid",
        "prefix": "PlayerInfo.userid",
        "body": "PlayerInfo.userid",
    },
    "Returns szSteamId" : {
        "description": "Returns szSteamId",
        "prefix": "PlayerInfo.szSteamId",
        "body": "PlayerInfo.szSteamId",
    },
    "Returns bot" : {
        "description": "Returns bot",
        "prefix": "PlayerInfo.bot",
        "body": "PlayerInfo.bot",
    },
    //render
    "Draws DrawFilledRect" : {
        "description": "Draws DrawFilledRect",
        "prefix": "Render.DrawFilledRect(Vector2D position, Vector2D size, Color color)",
        "body": "Render.DrawFilledRect(${1:Position}, ${2:Size}, ${3:Color})",
    },
    "Draws DrawOutlinedRect" : {
        "description": "Draws DrawOutlinedRect",
        "prefix": "Render.DrawOutlinedRect(Vector2D position, Vector2D size, Color color)",
        "body": "PlayerInfo.DrawOutlinedRect(${1:Position}, ${2:Size}, ${3:Color})",
    },
    "Draws DrawLine" : {
        "description": "Draws DrawLine",
        "prefix": "Render.DrawLine(Vector2D from, Vector2D to, Color color))",
        "body": "Render.DrawLine(${1:From}, ${2:To}, ${3:Color})",
    },
    "Draws DrawString" : {
        "description": "Draws DrawString",
        "prefix": "Render.DrawString(Vector2D position, bool shouldCenter, 'Text')",
        "body": "Render.DrawString(${1:Position}, ${2:Shouldcenter (bool) }, ${3:Color}, ${4:Text})",
    },
    //print
    "Prints to console" : {
        "description": "Prints to console",
        "prefix": "Print.PrintToConsole('Hello world!')",
        "body": "Print.PrintToConsole(${1:Text})",
    },
    //netvars
    "Finds offset" : {
        "description": "Finds offset",
        "prefix": "Netvars.FindOffset('CBaseEntity->m_flSimulationTime')",
        "body": "Netvars.FindOffset(${1:Object} -> ${2:Module})",
    },
    //EntityList
    "Returns CEntity" : {
        "description": "Returns CEntity",
        "prefix": "EntityList.GetClientEntity(entityIndex)",
        "body": "EntityList.GetClientEntity(${1:EntityIndex})",
    },
    "Returns GetClientEntityFromHandle" : {
        "description": "Returns CEntity",
        "prefix": "EntityList.GetClientEntityFromHandle(Handle)",
        "body": "EntityList.GetClientEntityFromHandle(${1:Handle})",
    },
    "Returns GetHighestEntityIndex" : {
        "description": "Returns GetHighestEntityIndex",
        "prefix": "EntityList.GetHighestEntityIndex()",
        "body": "EntityList.GetHighestEntityIndex()",
    },
    //CEntity
    "Returns ToPlayer" : {
        "description": "Returns ToPlayer",
        "prefix": "CEntity:ToPlayer()",
        "body": "CEntity:ToPlayer()",
    },
    "Returns GetAddress" : {
        "description": "Returns GetAddress",
        "prefix": "CEntity:GetAddress",
        "body": "CEntity:GetAddress",
    },
    "Returns GetIndex" : {
        "description": "Returns GetIndex",
        "prefix": "CEntity:GetIndex",
        "body": "CEntity:GetIndex",
    },
    "Returns IsDormant" : {
        "description": "Returns IsDormant",
        "prefix": "CEntity:IsDormant",
        "body": "CEntity:IsDormant",
    },
    "Returns GetPropInt" : {
        "description": "Returns GetPropInt",
        "prefix": "CEntity:GetPropInt(netvar/offset)",
        "body": "CEntity:GetPropInt(${1:Netvar/Offset})",
    },
    "Returns GetPropFloat" : {
        "description": "Returns GetPropFloat",
        "prefix": "CEntity:GetPropFloat(netvar/offset)",
        "body": "CEntity:GetPropFloat(${1:Netvar/Offset})",
    },
    "Returns GetPropShort" : {
        "description": "Returns GetPropShort",
        "prefix": "CEntity:GetPropShort(netvar/offset)",
        "body": "CEntity:GetPropShort(${1:Netvar/Offset})",
    },
    "Returns GetPropDouble" : {
        "description": "Returns GetPropDouble",
        "prefix": "CEntity:GetPropDouble(netvar/offset)",
        "body": "CEntity:GetPropDouble(${1:Netvar/Offset})",
    },
    "Returns GetPropBool" : {
        "description": "Returns GetPropBool",
        "prefix": "CEntity:GetPropBool(netvar/offset)",
        "body": "CEntity:GetPropBool(${1:Netvar/Offset})",
    },
    "Returns GetPropVector" : {
        "description": "Returns GetPropVector",
        "prefix": "CEntity:GetPropVector(netvar/offset)",
        "body": "CEntity:GetPropVector(${1:Netvar/Offset})",
    },
    "Sets SetPropInt" : {
        "description": "Sets SetPropInt",
        "prefix": "CEntity:SetPropInt(netvar/offset, value)",
        "body": "CEntity:SetPropInt(${1:Netvar/Offset}, ${2:Value})",
    },
    "Sets SetPropFloat" : {
        "description": "Sets SetPropFloat",
        "prefix": "CEntity:SetPropFloat(netvar/offset, value)",
        "body": "CEntity:SetPropFloat(${1:Netvar/Offset}, ${2:Value})",
    },
    "Sets SetPropShort" : {
        "description": "Sets SetPropShort",
        "prefix": "CEntity:SetPropShort(netvar/offset, value)",
        "body": "CEntity:SetPropShort(${1:Netvar/Offset}, ${2:Value})",
    },
    "Sets SetPropDouble" : {
        "description": "Sets SetPropDouble",
        "prefix": "CEntity:SetPropDouble(netvar/offset, value)",
        "body": "CEntity:SetPropDouble(${1:Netvar/Offset}, ${2:Value})",
    },
    "Sets SetPropBool" : {
        "description": "Sets SetPropBool",
        "prefix": "CEntity:SetPropBool(netvar/offset, value)",
        "body": "CEntity:SetPropBool(${1:Netvar/Offset}, ${2:Value})",
    },
    "Sets SetPropVector" : {
        "description": "Sets SetPropVector",
        "prefix": "CEntity:SetPropVector(netvar/offset, value)",
        "body": "CEntity:SetPropVector(${1:Netvar/Offset}, ${2:Value})",
    },
    //CPLAYER
    "Returns IsEnemy" : {
        "description": "Returns IsEnemy",
        "prefix": "CEntity:IsEnemy()",
        "body": "CEntity:IsEnemy()",
    },
    "Returns GetAbsOrigin" : {
        "description": "Returns GetAbsOrigin",
        "prefix": "CEntity:GetAbsOrigin()",
        "body": "CEntity:GetAbsOrigin()",
    },
    "Returns GetAbsAngles" : {
        "description": "Returns GetAbsAngles",
        "prefix": "CEntity:GetAbsAngles()",
        "body": "CEntity:GetAbsAngles()",
    },

    //attributes
    "Returns IsVisible" : {
        "description": "Returns IsVisible",
        "prefix": [":element:IsVisible()"],
        "body": ":element:IsVisible()",
    },
    "Sets SetVisible" : {
        "description": "Sets SetVisible",
        "prefix": [":element:SetVisible(bool)"],
        "body": ":element:SetVisible(${1:Bool})",
    },
    "Returns Data from widget" : {
        "description": "Returns Data from widget",
        "prefix": [
            ":checkbox:Get()",
            ":slider:Get()",
            ":keybind:Get()",
            ":combo:Get()",
            ":colorpicker:Get()",
        ],
        "body": "${1}:Get()",
    },
    "Returns Data from widget for MultiCombo" : {
        "description": "Returns Data from widget",
        "prefix": [
            ":multicombo:Get()"
        ],
        "body": "${1}:Get(${2:Element})",
    },
    //attributes : retardation incoming
    "Set checkbox state" : {
        "description": "Set checkbox state",
        "prefix": [
            ":checkbox:Set()"
        ],
        "body": "${1}:Set(${2:Bool})",
    },
    "Set slider value" : {
        "description": "Set slider value",
        "prefix": [
            ":slider:Set()"
        ],
        "body": "${1}:Set(${2:Value})",
    },
    "Set keybind value" : {
        "description": "Set keybind value",
        "prefix": [
            ":keybind:Set()"
        ],
        "body": "${1}:Set(${2:VK (Virtual key)})",
    },
    "Set keybind state" : {
        "description": "Set keybind state",
        "prefix": [
            ":keybind:SetKeyMode()"
        ],
        "body": "${1}:SetKeyMode()",
    },
    "Show keybind states" : {
        "description": "Set keybind state",
        "prefix": [
            "eKeybindstates"
        ],
        "body": [
            "--[[",
            "1 (Hold)",
            "2 (Toggle)",
            "3 (Always on)",
            "]]--"
        ]
    },
    "Returns whether if bind is pressed" : {
        "description": "Returns whether if bind is pressed",
        "prefix": [
            ":keybind:IsActive()"
        ],
        "body": "${1}:IsActive()",
    },
    "Set combo value" : {
        "description": "Set combo value",
        "prefix": [
            ":combo:Set()"
        ],
        "body": "${1}:Set(${22:Value})",
    },
    "Set multicombo value" : {
        "description": "Set multicombo value",
        "prefix": [
            ":multicombo:Set()"
        ],
        "body": "${1}:Set(${2:Element}, ${3:Value})",
    },
    "Set colorpicker value" : {
        "description": "Set colorpicker value",
        "prefix": [
            ":colorpicker:Set()"
        ],
        "body": "${1}:Set(${2:Color})",
    },
    "Sets function for button" : {
        "description": "Sets function for button",
        "prefix": ":button:SetFunction(function)",
        "body": "${1}:SetFunction(${2:function})"
    },
    //slider stuff
    "Returns slider minvalue" : {
        "description": "Returns slider minvalue",
        "prefix": [
            ":slider:GetMin()"
        ],
        "body": "${1}:GetMin()",
    },
    "Set slider minvalue" : {
        "description": "Set slider minvalue",
        "prefix": [
            ":slider:SetMin(value)"
        ],
        "body": "${1}:SetMin(${2:Value})",
    },
    "Returns slider maxvalue" : {
        "description": "Returns slider maxvalue",
        "prefix": [
            ":slider:GetMax()"
        ],
        "body": "${1}:GetMax()",
    },
    "Set slider maxvalue" : {
        "description": "Set slider maxvalue",
        "prefix": [
            ":slider:SetMax(value)"
        ],
        "body": "${1}:SetMax(${2:Value})",
    }, 
    "Returns slider GetFormat()" : {
        "description": "Returns slider GetFormat()",
        "prefix": [
            ":slider:GetFormat()"
        ],
        "body": "${1}:GetFormat()",
    }, 
    "Set slider format" : {
        "description": "Set slider format",
        "prefix": [
            ":slider:SetFromat()"
        ],
        "body": "${1}:SetFormat(${2:format})",
    }, 
    //multicombo stuff
    "Get by label multicombo" : {
        "description": "Get by label multicombo",
        "prefix": [
            ":multicombo:GetByLabel('label')"
        ],
        "body": "${1}:GetByLabel('${2:label}')",
    }, 
    "Set by label multicombo" : {
        "description": "Set by label multicombo",
        "prefix": [
            ":multicombo:SetByLabel('label', value)"
        ],
        "body": "${1}:SetByLabel('${2:label}', ${3:Value})",
    }, 
    //Convars
    "Find a variable" : {
        "description": "Find a variable",
        "prefix": "Convars.FindVar('Var')",
        "body": "Convars.FindVar('${1:Var}')"
    },
    "Returns GetString" : {
        "description": "Returns GetString",
        "prefix": "convar:GetString()",
        "body": "convar:GetString()"
    },
    "Returns GetFloat" : {
        "description": "Returns GetFloat",
        "prefix": "convar:GetFloat()",
        "body": "convar:GetFloat()"
    },
    "Returns GetInt" : {
        "description": "Returns GetInt",
        "prefix": "convar:GetInt()",
        "body": "convar:GetInt()"
    },
    "Sets setValueString" : {
        "description": "Sets setValueString",
        "prefix": "convar:setValueString('value')",
        "body": "convar:setValueString('${1:Value}')"
    },
    "Sets SetValueFloat" : {
        "description": "Sets SetValueFloat",
        "prefix": "convar:SetValueFloat(number)",
        "body": "convar:SetValueFloat(${1:number})"
    },
    "Sets SerValueInt" : {
        "description": "Sets SerValueInt",
        "prefix": "convar:SerValueInt(number)",
        "body": "convar:SerValueInt(${1:number})"
    },
    //input????

    //ragebot
    "Returns GetBacktrack" : {
        "description": "Returns RageData.GetBacktrack",
        "prefix": "RageData.GetBacktrack()",
        "body": "RageData.GetBacktrack()",
    },
    "Returns GetDamage" : {
        "description": "Returns RageData.GetDamage",
        "prefix": "RageData.GetDamage()",
        "body": "RageData.GetDamage()",
    },
    "Returns GetHitbox" : {
        "description": "Returns RageData.GetHitbox",
        "prefix": "RageData.GetHitbox()",
        "body": "RageData.GetHitbox()",
    },
    "Returns GetHitChance" : {
        "description": "Returns RageData.GetHitChance",
        "prefix": "RageData.GetHitChance()",
        "body": "RageData.GetHitChance()",
    },
    "Returns GetLocalShootPosition" : {
        "description": "Returns RageData.GetLocalShootPosition",
        "prefix": "RageData.GetLocalShootPosition()",
        "body": "RageData.GetLocalShootPosition()",
    },
    "Returns GetTarget" : {
        "description": "Returns RageData.GetTarget",
        "prefix": "RageData.GetTarget()",
        "body": "RageData.GetTarget()",
    },
    "Returns GetTargetSimulationTime" : {
        "description": "Returns RageData.GetTargetSimulationTime",
        "prefix": "RageData.GetTargetSimulationTime()",
        "body": "RageData.GetTargetSimulationTime()",
    },
    "Returns GetSafe" : {
        "description": "Returns RageData.GetSafe",
        "prefix": "RageData.GetSafe()",
        "body": "RageData.GetSafe()",
    },
    "Returns GetClientHitbox" : {
        "description": "Returns RageData.GetClientHitbox",
        "prefix": "RageData.GetClientHitbox()",
        "body": "RageData.GetClientHitbox()",
    },
    "Returns GetResolveDelta" : {
        "description": "Returns RageData.GetResolveDelta",
        "prefix": "RageData.GetResolveDelta()",
        "body": "RageData.GetResolveDelta()",
    },
    "Returns GetServerHitbox" : {
        "description": "Returns RageData.GetServerHitbox",
        "prefix": "RageData.GetServerHitbox()",
        "body": "RageData.GetServerHitbox()",
    },
    "Returns CanShoot" : {
        "description": "Returns RageData.CanShoot",
        "prefix": "RageData.CanShoot()",
        "body": "RageData.CanShoot()",
    },
    //utils
    "Utils CreateInterface" : {
        "description": "Utils CreateInterface",
        "prefix": "Utils.CreateInterface('module', 'interfacename')",
        "body": "Utils.CreateInterface('${1:Module}','${2:Interface Name}')"
    },
    "Utils World to Screen" : {
        "description": "Utils World to Screen",
        "prefix": "Utils.WorldToScreen(Vector3D())",
        "body": "Utils.WorldToScreen('${1:Vector3D()}')"
    },
    "Utils FindSignature" : {
        "description": "Utils FindSignature",
        "prefix": "Utils.FindSignature('module', 'signature')",
        "body": "Utils.FindSignature('${1:Module}','${2:signature}')"
    },
    //trace
    "Trace TraceLine" : {
        "description": "Trace TraceLine",
        "prefix": "Trace.TraceLine(skipEntityIndex, mask, Vector start, Vector end)",
        "body": "Trace.TraceLine(${1:skipEntityIndex}, ${2:mask}, ${3:(Vector) start}, ${4:(Vector) end})",
    },
    "Returns vecEnd" : {
        "description": "Returns vecEnd",
        "prefix": "Trace.vecEnd",
        "body": "Trace.vecEnd",
    },
    "Returns flFraction" : {
        "description": "Returns flFraction",
        "prefix": "Trace.flFraction",
        "body": "Trace.flFraction",
    },
    "Returns iContents" : {
        "description": "Returns iContents",
        "prefix": "Trace.iContents",
        "body": "Trace.iContents",
    },
    "Returns bAllSolid" : {
        "description": "Returns bAllSolid",
        "prefix": "Trace.bAllSolid",
        "body": "Trace.bAllSolid",
    },
    "Returns bStartSolid" : {
        "description": "Returns bStartSolid",
        "prefix": "Trace.bStartSolid",
        "body": "Trace.bStartSolid",
    },
    "Returns iHitGroup" : {
        "description": "Returns iHitGroup",
        "prefix": "Trace.iHitGroup",
        "body": "Trace.iHitGroup",
    },
    "Returns iHitbox" : {
        "description": "Returns iHitbox",
        "prefix": "Trace.iHitbox",
        "body": "Trace.iHitbox",
    },
    "Returns fDispFlags" : {
        "description": "Returns fDispFlags",
        "prefix": "Trace.fDispFlags",
        "body": "Trace.fDispFlags",
    },

    //playerlist
    "Returns GetPlayerSettings" : {
        "description": "Returns GetPlayerSettings",
        "prefix": "PlayerList.GetPlayerSettings(entityIndex)",
        "body": "PlayerList.GetPlayerSettings(${1:entityIndex})",
    },
    "Returns IsRagebotWhitelisted" : {
        "description": "Returns IsRagebotWhitelisted",
        "prefix": "playerListEntity:IsRagebotWhitelisted()",
        "body": "playerListEntity:IsRagebotWhitelisted()",
    },
    "Returns SetRagebotWhitelist" : {
        "description": "Returns SetRagebotWhitelist",
        "prefix": "playerListEntity:SetRagebotWhitelist(bool)",
        "body": "playerListEntity:SetRagebotWhitelist(${1:Bool})",
    },
    "Returns IsOverridingResolver" : {
        "description": "Returns IsOverridingResolver",
        "prefix": "playerListEntity:IsOverridingResolver()",
        "body": "playerListEntity:IsOverridingResolver()",
    },
    "Returns ToggleResolverOverride" : {
        "description": "Returns ToggleResolverOverride",
        "prefix": "playerListEntity:ToggleResolverOverride(bool)",
        "body": "playerListEntity:ToggleResolverOverride(${1:Bool})",
    },
    "Returns SetCustomResolveYaw" : {
        "description": "Returns SetCustomResolveYaw",
        "prefix": "playerListEntity:SetCustomResolveYaw(yaw)",
        "body": "playerListEntity:SetCustomResolveYaw(${1: Yaw (-58 +58)})",
    },
    //Events
    "Returns Int from pEvent" : {
        "description": "Returns Int from pEvent",
        "prefix": "Events.GetInt(pEvent,Varname)",
        "body": "Events.GetInt(pEvent,${1:Varname}",
    },
    "Returns Name from pEvent" : {
        "description": "Returns Name from pEvent",
        "prefix": "Events.GetName(pEvent,Varname)",
        "body": "Events.GetName(pEvent,${1:Varname}",
    },
    "Returns Bool from pEvent" : {
        "description": "Returns Bool from pEvent",
        "prefix": "Events.GetBool(pEvent,Varname)",
        "body": "Events.GetBool(pEvent,${1:Varname}",
    },
    "Returns Float from pEvent" : {
        "description": "Returns Float from pEvent",
        "prefix": "Events.GetFloat(pEvent,Varname)",
        "body": "Events.GetFloat(pEvent,${1:Varname}",
    },
    "Returns String from pEvent" : {
        "description": "Returns String from pEvent",
        "prefix": "Events.GetString(pEvent,Varname)",
        "body": "Events.GetString(pEvent,${1:Varname}",
    },
    "Sets Int from pEvent" : {
        "description": "Returns Int from pEvent",
        "prefix": "Events.SetInt(pEvent,Varname)",
        "body": "Events.SetInt(pEvent,${1:Varname},${2:Value}",
    },
    "Sets Bool from pEvent" : {
        "description": "Returns Bool from pEvent",
        "prefix": "Events.SetBool(pEvent,Varname)",
        "body": "Events.SetBool(pEvent,${1:Varname},${2:Value}",
    },
    "Sets Float from pEvent" : {
        "description": "Returns Float from pEvent",
        "prefix": "Events.SetFloat(pEvent,Varname)",
        "body": "Events.SetFloat(pEvent,${1:Varname},${2:Value}",
    },
    "Sets String from pEvent" : {
        "description": "Returns String from pEvent",
        "prefix": "Events.SetString(pEvent,Varname)",
        "body": "Events.SetString(pEvent,${1:Varname},${2:Value}",
    },
    //Trace
    "Traces line" : {
        "description": "Traces line",
        "prefix": "Trace.TraceLine(iSkipEntIndex,iMask,VecStart,VecEnd)",
        "body": "Trace.TraceLine(${1:iSkipEntIndex},${2:iMask},${3:VecStart},${4:VecEnd}",
    },
}